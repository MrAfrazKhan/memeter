{"version":3,"sources":["Meme.js","Header.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["Meme","props","className","toptext","id","src","img","bottomtext","Header","style","border","padding","color","fontWeight","href","Input","onChange","onchange","type","name","placeholder","htmlFor","multiple","accept","onClick","onScreenShot","App","state","imgName","bind","takeScreenShot","e","this","alert","document","getElementById","display","getElementsByClassName","backgroundColor","html2canvas","allowTaint","then","canvas","saveAs","toDataURL","split","target","value","startIndex","indexOf","lastIndexOf","filename","substring","setState","URL","createObjectURL","files","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7594d80.chunk.js","sourcesContent":["import React from 'react'\n// import ReactResizeDetector from 'react-resize-detector'\n\nfunction Meme(props){\n    return(\n        <div className='meme' >\n            <p >{props.toptext}</p>\n            <img id='memeImg' src={props.img} />  \n            <p>{props.bottomtext}</p>\n            <h6 id = \"footer\" >https://mrafrazkhan.github.io/memeter</h6>\n            </div>\n    )\n}\n\nexport  default Meme\n","import React from 'react'\n\nfunction Header(){\n    return(\n        <header  >\n            <div className='row' >\n                <div className='col-md-6' >\n                    <img src='https://www.freepngimg.com/thumb/internet_meme/3-2-troll-face-meme-png-thumb.png' />\n                    Memeter\n                    <h6>A Text Meme Generator</h6>\n                </div>\n                <div className='col-md-6 contact' >\n                <p><h6 style={{border:\"1px solid gray\", padding:\"10px\", color: \"#666666\", fontWeight: 700,\n                    }} >Afraz Khan | \n                    <a href=\"https://www.linkedin.com/in/mrafrazkhan\" ><i className=\"fa fa-linkedin\"></i></a>\n                    <a href=\"https://twitter.com/MrAfrazkhan\" ><i  className=\"fa fa-twitter\"></i></a>\n                    \n                    <a href=\"https://www.facebook.com/Afrazkhan.me\" ><i className=\"fa fa-facebook\"></i></a>\n                    \n                    <a href=\"https://github.com/MrAfrazKhan/memeter\" ><i  className=\"fa fa-github\"></i></a><sup>Code here</sup>\n                    \n                </h6>\n                <span id='react' >- built with <a href=\"https://www.reactjs.org\" >Reactjs</a> -</span>\n            </p>\n                </div>\n            </div>\n                     \n                     \n                    \n                 </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport { func } from 'prop-types'\n// import $ from 'jquery'\n\nfunction Input(props){\n    return(\n        <form className=\"form\">\n                     <div className='row' >\n                <div className=\"form-group col-md-3 mb-2\">\n                    <input onChange={props.onchange} type=\"text\" className=\"form-control\" name=\"toptext\" placeholder='Enter Meme Top Text' />\n                </div>\n                <div className=\"form-group mx-sm col-md-3 mb-2\">\n                    <input onChange={props.onchange} type=\"text\" className=\"form-control\" name=\"bottomtext\" placeholder=\"Enter Meme Bottom Text\" />\n                </div>\n                <div className='col-md-2' >\n                <label htmlFor='upload' className='label label-primary' >Select Imageüéö</label>\n                <input onChange={props.onchange} type='file' id='upload' multiple={false} accept='.jpg, .jpeg, .png, .svg, .gif, .bmp, .ico' />\n                \n                </div>\n                <div className='col-md-4' >\n                <button type='button' onClick={props.onScreenShot} className=\"btn btn-success mb-2\">Generate MemeüôÖ‚Äçüòõ</button>\n                </div>\n                </div>\n        </form>\n    )\n}\n\n\nexport default Input ","import React from 'react'\nimport './meme.css'\nimport Meme from './Meme'\nimport Header from './Header'\nimport Input from './Input'\nimport saveAs from 'file-saver'\nimport html2canvas from 'html2canvas'\nimport { func } from 'prop-types'\n\nclass App extends React.Component{\n\n    constructor(){\n        super()\n        this.state = {\n            toptext : '',\n            bottomtext : '',\n            img : '',\n            imgName : ''\n        }\n        this.onChange = this.onChange.bind(this)\n        this.takeScreenShot = this.takeScreenShot.bind(this)\n    }\n\n    // take screenshot of selected image \n\n    takeScreenShot(e){\n\n        if (this.state.img === '' || this.state.img === null){\n            alert('üîßplease, select an image first. üòß')\n        }else{\n\n            document.getElementById('footer').style.display = 'block'\n            document.getElementsByClassName('meme')[0].style.backgroundColor = 'black'\n\n            html2canvas(document.getElementsByClassName('meme')[0], {allowTaint:true, backgroundColor:null}).then(canvas => {            \n                saveAs(canvas.toDataURL(), (this.state.imgName.split('.')[0] + \".png\"))\n            })\n            document.getElementById('footer').style.display = 'none'\n        }\n\n    }\n\n    // handle change events \n\n    onChange(e){\n        var {name, type, value} = e.target;\n\n        // when file input is changed or incorporated\n        if (type === 'file'){\n\n            var startIndex = (value.indexOf('\\\\') >= 0 ? value.lastIndexOf('\\\\') : value.lastIndexOf('/'));\n            var filename = value.substring(startIndex);\n            if (filename.indexOf('\\\\') === 0 || filename.indexOf('/') === 0) {\n                filename = filename.substring(1);\n            }\n\n            this.setState({\n                img : URL.createObjectURL(e.target.files[0]),\n                imgName : filename\n            })\n        }\n\n        // when textbox texts are changed\n        else{\n            this.setState({\n                [name] : value\n            })    \n        }\n        \n    }\n    render(){\n        return (\n             <div>\n                 <Header />\n                 <hr></hr>\n                 <Input onchange={this.onChange} onScreenShot={this.takeScreenShot} />\n                <Meme img={this.state.img} bottomtext={this.state.bottomtext} toptext={this.state.toptext}  />\n             </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}